// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Property {
  id              Int               @id @default(autoincrement())
  name            String
  description     String            @db.LongText
  category        String
  pictures        String
  location        String
  rooms           Room[]
  reviews         Review[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Reservation     Reservation[]
  Tenant          Tenant?           @relation(fields: [tenantId], references: [id])
  tenantId        Int?
  PropertyPicture PropertyPicture[]
}

model PropertyPicture {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RoomPicture {
  id        Int      @id @default(autoincrement())
  url       String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id           Int           @id @default(autoincrement())
  type         String // Menambahkan jenis kamar: 'deluxe', 'standard', 'suite'
  price        Float
  pictures     String        @db.LongText
  description  String
  propertyId   Int
  property     Property      @relation(fields: [propertyId], references: [id])
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  RoomPicture  RoomPicture[]
}

model Review {
  id         Int      @id @default(autoincrement())
  content    String
  rating     Int
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String?
  name        String?
  profile     String?       @db.LongText
  isActive    Boolean       @default(false)
  role        String        @default("user")
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
}

model Tenant {
  id          Int        @id @default(autoincrement())
  name        String?
  email       String     @unique
  password    String?
  phoneNumber String
  profile     String?    @db.LongText
  isActive    Boolean    @default(false)
  role        String     @default("tenant")
  properties  Property[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Reservation {
  id           Int       @id @default(autoincrement())
  roomId       Int
  userId       Int
  room         Room      @relation(fields: [roomId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  startDate    DateTime
  endDate      DateTime
  status       String
  paymentProof String?
  price        Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Property     Property? @relation(fields: [propertyId], references: [id])
  propertyId   Int?
  Payment      Payment[]
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  amount        Float
  method        String
  status        String
  proof         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
